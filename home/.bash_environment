# ~/.bash_environment
#
# Author Augusto Pascutti <augusto.hp@gmail.com>
# Part of http://github.com/augustohp/warwick
# vim: noet ts=4 sw=4 ft=sh:

# shellcheck shell=sh disable=SC3044,SC3043

echo '  Loading ~/.bash_environment ...';

export TERM=xterm-256color
export PS1="\W -> "

# Search for a binary path inside home
if [ -d "$HOME/bin" ]; then
	export PATH="$HOME/bin:$PATH"
fi;

# -----------------------------------------------------------------------------
#                                                                        Alises

alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias l='ls'
alias ll='ls -laht'
alias sudo='sudo env PATH="${PATH}"' # keep current binaries
alias sl="ls"
alias pcat="pygmentize -f terminal256 -O style=native -g"
alias c="clear"
alias ..="cd .."
alias .-="cd -"
alias ...='cd $(git rev-parse --show-cdup)'
alias k="kubectl"
alias kt="kubetail"
alias kc="kubectx"

# -----------------------------------------------------------------------------
#                                                                           Git

git_clean_branch_prefix () { sed 's/^[\t \*]*//'; }

##
# Will display all local branches in the current repository
# using `fzf` to choose one among them. Returning only one.
##
# Usage: git_choose_local_branch
git_choose_local_branch ()
{
	git branch \
		| git_clean_branch_prefix \
		| fzf --no-multi --height="15%" --header "Local branches"
}

##
# Will output "main" or "master", depending on the local branch
# that exists.
##
# Usage: git_main_or_master_branch
git_main_or_master_branch()
{
	git branch \
		| grep -e main -e master \
		| head -n 1 \
		| git_clean_branch_prefix
}

##
# Will go to a given branch or display among existing ones
# using `fzf`.
##
# Usage: git_checkout_interactive [branch]
git_checkout_interactive ()
{
    local branch="${1:-}"
    
    if [ -z "$branch" ]
    then
		branch="$(git_choose_local_branch)"
    fi
    if [ -z "$branch" ]
    then
        return 1
    fi

	git checkout "$branch"
}

##
# Checkouts to the "main" branch or the repository, which might be
# called "master" depending when the repository was created.
##
# Usage: git_checkout_main [branch]
git_checkout_main ()
{
	local main_branch="${1:-}"

	if [ -z "$main_branch" ]
	then
		main_branch="$(git_main_or_master_branch)"
	fi

	git checkout "$main_branch"
}

git_unstaged_files ()
{
	git status --short \
		| grep -v '^[MARCD]' \
		| awk '{ print $2 }'
}

##
# Displays a menu of changed files to be selected and added
# interactively. Uses `fzf`
##
# Usage: git_add_interactive
git_add_interactive ()
{
	local files

	files=$(git_unstaged_files | fzf --multi --header "Which files to add?" --preview 'git diff -- {}')
	git add "${files}"
}

alias g="git"
alias ga="git_add_interactive"
alias gs="git s"
alias gd="git diff"
alias gb="git branch"
alias gmb="git_main_or_master_branch"
alias gcmb="git_checkout_main"
alias gc="git_checkout_interactive"

alias ga.="git add ."
alias gC="git commit"
alias ga.gpf="git add . && git commit --amend --no-edit && git push --force"

alias gp="git pull"
alias gP="git push"
alias gfo="git fetch origin"

# -----------------------------------------------------------------------------
#                                                                      History

# Avoid duplicated lines and spaced started ones
HISTCONTROL=ignoreboth 
# Append to the history file
shopt -s histappend 
HISTSIZE=1000 # size of history of the current session
HISTFILESIZE=20000 # size of whole history

shopt -s checkwinsize

# -----------------------------------------------------------------------------
#                                                                VIM everywhere

set -o vi
export EDITOR="vim"

# -----------------------------------------------------------------------------
#                                                                          SSH

# Runs ssh-agent
if [ -n "$(command -v ssh-agent)" ]
then
    if [ -z "$SSH_AUTH_SOCK" ]
    then
        echo "    Starting ssh-agent..."
		eval "$(ssh-agent)" > /dev/null
    fi
fi

# -----------------------------------------------------------------------------
#                                                                          Vim

if [ -n "$(command -v nvim)" ]
then
	alias vim=nvim
	echo '    Favouring nvim...'
fi
